/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.Oncologist;

import Business.EcoSystem;
import Business.Oncologist.Oncologist;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.OncologistAppointment;
import Business.WorkQueue.OncologistAppointmentDirectory;
import Business.WorkQueue.appointmentCheck;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chand
 */
public class ManageAppointment extends javax.swing.JPanel {
    
     private final JPanel container;
    private final UserAccount userAccount;
    private final EcoSystem ecosystem;

    /**
     * Creates new form ManageAppointment
     */
    public ManageAppointment(JPanel container,EcoSystem ecosystem,UserAccount userAccount) {
        initComponents();
        this.container=container;
        this.ecosystem=ecosystem;
        this.userAccount=userAccount;
        populate_table();
    }
    
    public void populate_table()
    {
        OncologistAppointmentDirectory dad=ecosystem.getOncologistAppointmentDirectory();
        ArrayList<OncologistAppointment> ol=dad.getArray();
        int u=ol.size();
        System.out.println(u);
        for(int i=0;i<u;i++)
        {
            OncologistAppointment o=ol.get(i);
            Oncologist d=(Oncologist)userAccount;
            System.out.println("o.getOncologistName()");
             System.out.println("d.getFirstname()");
            if(o.getOncologistName().matches(d.getFirstname()))
            {
            
                DefaultTableModel t2 = (DefaultTableModel) jTable1.getModel();
                String s1=String.valueOf(o.getOncologistID());
                
                
                String s[]={s1,o.getUserName(),o.getStatus(),o.getDate(),o.getTime()};
                t2.addRow(s);
            }
            
            
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnConsult = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnPrescription = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Status", "Date", "Time"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        btnConsult.setBackground(new java.awt.Color(195, 233, 245));
        btnConsult.setText("Consult");
        btnConsult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultActionPerformed(evt);
            }
        });

        btnCancel.setBackground(new java.awt.Color(195, 233, 245));
        btnCancel.setText("Cancel Appointment");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnPrescription.setBackground(new java.awt.Color(195, 233, 245));
        btnPrescription.setText("Prescription");
        btnPrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrescriptionActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(btnConsult)
                        .addGap(89, 89, 89)
                        .addComponent(btnCancel)
                        .addGap(79, 79, 79)
                        .addComponent(btnPrescription)))
                .addContainerGap(183, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(407, 407, 407)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(408, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConsult)
                    .addComponent(btnCancel)
                    .addComponent(btnPrescription))
                .addContainerGap(228, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(236, 236, 236)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(236, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultActionPerformed
        // TODO add your handling code here:
        DefaultTableModel  t2 = (DefaultTableModel) jTable1.getModel();
        int selectedRow=jTable1.getSelectedRow();
        if(selectedRow>=0)
        {
            int s=Integer.parseInt(t2.getValueAt(selectedRow, 0).toString());
            System.out.println("id"+s);
            OncologistAppointmentDirectory dad=ecosystem.getOncologistAppointmentDirectory();
            ArrayList<OncologistAppointment> ol=dad.getArray();
            int u=ol.size();

            for(int i=0;i<u;i++)
            {
                OncologistAppointment o=ol.get(i);
                if(s==o.getOncologistID()/*&&o.getStatus().matches("Deliver Man Assigned")*/)
                {
                    if(o.getStatus().matches("Appointment Booked"))
                    {
                        o.setStatus("Done");
                        JOptionPane.showMessageDialog(null, "Processed!!");
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null,"Wrong move!!");

                    }
                }
            }
            jTable1.setModel(new DefaultTableModel(null,new String[]{"ID","Name","Status","Date","Time"}));
            populate_table();
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Select a Row!!");
        }

    }//GEN-LAST:event_btnConsultActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        DefaultTableModel  t2 = (DefaultTableModel) jTable1.getModel();
        int selectedRow=jTable1.getSelectedRow();
        if(selectedRow>=0)
        {
            int s=Integer.parseInt(t2.getValueAt(selectedRow, 0).toString());
            System.out.println("id"+s);
            OncologistAppointmentDirectory dad=ecosystem.getOncologistAppointmentDirectory();
            ArrayList<OncologistAppointment> ol=dad.getArray();
            int u=ol.size();

            for(int i=0;i<u;i++)
            {
                OncologistAppointment o=ol.get(i);
                if(s==o.getOncologistID()/*&&o.getStatus().matches("Deliver Man Assigned")*/)
                {
                    if(o.getStatus().matches("Appointment Booked"))
                    {
                        o.setStatus("Canceled");
                        check(o.getOncologistName(),o.getDate(),o.getTime());
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null,"Appointment Canceled");

                    }
                }
            }
            jTable1.setModel(new DefaultTableModel(null,new String[]{"ID","Name","Status","Date","Time"}));
            populate_table();
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Select a Row!!");
        }

    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnPrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrescriptionActionPerformed
        // TODO add your handling code here:
        DefaultTableModel  t2 = (DefaultTableModel) jTable1.getModel();
        int selectedRow=jTable1.getSelectedRow();
        if(selectedRow>=0)
        {
            int s=Integer.parseInt(t2.getValueAt(selectedRow, 0).toString());
            System.out.println("id"+s);
            OncologistAppointmentDirectory dad=ecosystem.getOncologistAppointmentDirectory();
            ArrayList<OncologistAppointment> ol=dad.getArray();
            int u=ol.size();

            for(int i=0;i<u;i++)
            {
                OncologistAppointment o=ol.get(i);
                if(s==o.getOncologistID()/*&&o.getStatus().matches("Deliver Man Assigned")*/)
                {
                    if(o.getStatus().matches("Done"))
                    {

                        PharmacyDoctor ur=new PharmacyDoctor(container,ecosystem,userAccount,o.getUserName());
                        jPanel1.add(ur);
                        CardLayout layout = (CardLayout) jPanel1.getLayout();
                        layout.next(jPanel1);

                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null,"Wrong Move!!");
                    }
                }
            }
            jTable1.setModel(new DefaultTableModel(null,new String[]{"ID","Name","Status","Date","Time"}));
            populate_table();
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Select a Row!!");
        }
    }//GEN-LAST:event_btnPrescriptionActionPerformed
    
    public void check(String s,String d1,String date)
    {
        boolean r=false;
        appointmentCheck check= ecosystem.getAppcheck();
        Map<String,List<String>> a=check.getPeopleByFirstName();
        for (Map.Entry mapElement : a.entrySet()) {
            if(mapElement.getKey().toString().matches(s))
            {
                List<String>a1=(List)mapElement.getValue();
                String s1=a1.get(0);
                String s2=a1.get(1);
                if(s1.matches(d1))
                {
                    if(s2.matches(date))
                    {
                        a.remove(s);
                    }
                }
            }
           
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnConsult;
    private javax.swing.JButton btnPrescription;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
